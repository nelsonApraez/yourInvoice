///*** ProjectCustom Colombia
///*** Proyecto: ProjectCustom
///*** Año: 2024
///*********************************************

using yourInvoice.Common.Business.CatalogModule;
using yourInvoice.Common.Integration.Storage;
using yourInvoice.Offer.Application.Admin.UploadAttachment;
using yourInvoice.Offer.Domain.Documents;
using yourInvoice.Offer.Domain.Offers;
using yourInvoice.Offer.Domain.Primitives;
using static yourInvoice.Common.ErrorHandling.MessageHandler;

namespace Application.Customer.UnitTest.Admin.UploadAttachment
{
    public class UploadAttachmentCommandHandlerTest
    {
        private readonly Mock<IOfferRepository> _mockRepository;
        private readonly Mock<IDocumentRepository> _mockDocumentRepository;
        private readonly Mock<IUnitOfWork> _mockUnitOfWork;
        private readonly Mock<IStorage> _mockStorage;
        private readonly UploadAttachmentCommandHandler _handler;

        public UploadAttachmentCommandHandlerTest()
        {
            _mockRepository = new Mock<IOfferRepository>();
            _mockUnitOfWork = new Mock<IUnitOfWork>();
            _mockDocumentRepository = new Mock<IDocumentRepository>();
            _mockStorage = new Mock<IStorage>();

            _handler = new UploadAttachmentCommandHandler(_mockDocumentRepository.Object, _mockStorage.Object, _mockRepository.Object,
                  _mockUnitOfWork.Object);
        }

        [Fact]
        public async Task HandleUploadAttachment_Uploaded_Sucess()
        {
            //Arrange
            // Se configura los parametros de entrada de nuestra prueba unitaria.
            int offerid = 1;
            Guid userId = new Guid("430D9477-855A-44AE-93E1-1A5ACAA1A5CA");
            yourInvoice.Offer.Domain.Offer offer = new(It.IsAny<Guid>(), userId, userId, DateTime.UtcNow, DateTime.UtcNow, "", CatalogCode_OfferStatus.InProgress);

            _mockRepository.Setup(x => x.GetByConsecutiveAsync(offerid)).ReturnsAsync(offer);
            _mockStorage.Setup(x => x.UploadAsync(It.IsAny<byte[]>(), It.IsAny<string>())).ReturnsAsync("ruta");
            _mockDocumentRepository.Setup(x => x.GetDocumentsByOfferAndTypeAsync(It.IsAny<Guid>(), CatalogCode_DocumentType.DocumentsUploadByUserOnResume)).ReturnsAsync(new List<Document>());

            UploadAttachmentCommand command = new(offerid, "", "image.pdf");

            //Act
            // Se ejecuta el metodo a probar de nuestra prueba unitaria
            var result = await _handler.Handle(command, default);

            //Assert
            // Se verifica los datos de retorno de nuestro metodo probado en la prueba unitaria
            result.IsError.Should().BeFalse();
            Assert.True(result.Value);
        }

        [Fact]
        public async Task HandleUploadAttachment_FileNoAttachment_UnSuccess()
        {
            //Arrange
            // Se configura los parametros de entrada de nuestra prueba unitaria.
            int offerid = 1;
            Guid userId = new Guid("430D9477-855A-44AE-93E1-1A5ACAA1A5CA");
            yourInvoice.Offer.Domain.Offer offer = new(It.IsAny<Guid>(), userId, userId, DateTime.UtcNow, DateTime.UtcNow, "", CatalogCode_OfferStatus.InProgress);
            _mockRepository.Setup(x => x.GetByConsecutiveAsync(offerid)).ReturnsAsync(offer);
            _mockDocumentRepository.Setup(x => x.GetDocumentsByOfferAndTypeAsync(It.IsAny<Guid>(), CatalogCode_DocumentType.DocumentsUploadByUserOnResume)).ReturnsAsync(new List<Document>() { new Document(It.IsAny<Guid>(),
                It.IsAny<Guid>(), null,"", CatalogCode_DocumentType.DocumentsUploadByUserOnResume,true,"") });

            UploadAttachmentCommand command = new(offerid, "", "image.xxx");

            //Act
            // Se ejecuta el metodo a probar de nuestra prueba unitaria
            var result = await _handler.Handle(command, default);

            //Assert
            // Se verifica los datos de retorno de nuestro metodo probado en la prueba unitaria
            result.IsError.Should().BeTrue();
            result.FirstError.Type.Should().Be(ErrorType.Validation);
            Assert.Equal(GetErrorDescription(MessageCodes.FileRejectByNoZip), result.FirstError.Description);
        }

        [Fact]
        public async Task HandleUploadAttachment_NoOffer_UnSuccess()
        {
            //Arrange
            // Se configura los parametros de entrada de nuestra prueba unitaria.

            UploadAttachmentCommand command = new(1, "", "image.pdf");

            //Act
            // Se ejecuta el metodo a probar de nuestra prueba unitaria
            var result = await _handler.Handle(command, default);

            //Assert
            // Se verifica los datos de retorno de nuestro metodo probado en la prueba unitaria
            result.IsError.Should().BeTrue();
            result.FirstError.Type.Should().Be(ErrorType.Validation);
            Assert.Equal(GetErrorDescription(MessageCodes.OfferNotExist), result.FirstError.Description);
        }
    }
}